# -*- coding: utf-8 -*-
"""EEG Report.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H-8vmVvbUAqjONjz2kklMuuP4Hp8TwVj
"""

pip install fpdf

# from google.colab import drive
# drive.mount('/content/drive')
import pandas as pd

# data = pd.read_csv("/content/report data.csv")

import pandas as pd
url = 'https://github.com/dormant06/Medical-data-Analysis/raw/main/report%20data.csv'
data = pd.read_csv(url)

import os
import shutil
import numpy as np
import pandas as pd
import calendar
from datetime import datetime
from fpdf import FPDF

import matplotlib.pyplot as plt
from matplotlib import rcParams
rcParams['axes.spines.top'] = False
rcParams['axes.spines.right'] = False

# data = pd.read_csv("/content/EEG_mamdata_patient.csv")
data.head()

val = int(input("Enter patient ID: "))

indx = 0;
for i in range(len(data['ID'])):
    # print(data['ID'][i])
    if (val==(data['ID'][i])):
      indx = i
      # print("hhbh");
      break;
    # else :
    #   print
# below line will print that tuple
data.iloc[indx]

phq=data.iloc[indx]['PHQ']
gad=data.iloc[indx]['GAD']
hdrs=data.iloc[indx]['HDRS']

df = pd.DataFrame([data.iloc[indx]])
print (df)

import matplotlib.cm as cm
from matplotlib.colors import ListedColormap

# Get the colormap
rdylgn = cm.get_cmap('RdYlGn_r')

# Create a new colormap with 10 equally spaced colors
new_cmap = ListedColormap(rdylgn(np.linspace(0, 1, 10)))

import matplotlib.pyplot as plt


plt.show()

def plot_single(data: pd.DataFrame, filename: str) -> None:
    # colors = ['green','blue','purple']
    # plt.bar(df['PHQ'], df['GAD'], df['HDRS'], color=colors)
    # plt.title('Country Vs GDP Per Capita', fontsize=14)
    # plt.xlabel('Country', fontsize=14)
    # plt.ylabel('GDP Per Capita', fontsize=14)
    # plt.grid(True)
    labels = ['PHQ', 'GAD', 'HDRS', 'WB-']
    fig, ax = plt.subplots(figsize=(8,4))
    # ax.barh(['PHQ', 'GAD', 'HDRS', 'MMSE', 'WB-'], data.loc(axis=0)[index, ['PHQ', 'GAD', 'HDRS', 'MMSE', 'WB-']], color=['#4C72B0', '#55A868', '#C44E52','#55A868','#55A868'])

    current_data = [data['PHQ'], data['GAD'], data['HDRS'], data['WB-']]
    cmap = plt.cm.get_cmap('RdYlGn_r')
    norm = plt.Normalize(vmin=0, vmax=1)
    colors = [cmap(norm(score)) for score in current_data]
    # colors = cm.RdYlGn(np.linspace(0, 1, len(labels)))

    indices = np.arange(len(labels))

    width = 0.35

    # current_data = [data['PHQ'], data['GAD'], data['HDRS'], data['MMSE'], data['WB-']]
    ax.barh(indices, current_data, height=width, color=colors)

    # Set the x-axis limits
    ax.set_xlim(0, 1)

    # Set the x-tick labels
    ax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])
    ax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])


    # Add a grid
    # ax.grid(axis='x', linestyle='--', alpha=0.9)

    # Add labels to the bars
    # for i, v in enumerate(current_data):
    #  ax.text(v + 0.01, i, str(round(v,2)), color='#333333', fontweight='bold')

    ax.set_yticks(indices + width / 2)
    ax.set_yticklabels(labels)

    # Set the title
    ax.set_title('Scores on First visit')

    plt.savefig(filename, dpi=300, bbox_inches='tight', pad_inches=0)
    plt.close()
    return

def plot_second(data: pd.DataFrame, filename: str) -> None:
    # colors = ['green','blue','purple']
    # plt.bar(df['PHQ'], df['GAD'], df['HDRS'], color=colors)
    # plt.title('Country Vs GDP Per Capita', fontsize=14)
    # plt.xlabel('Country', fontsize=14)
    # plt.ylabel('GDP Per Capita', fontsize=14)
    # plt.grid(True)
    labels = ['PHQ_2', 'GAD_2', 'HDRS_2', 'WB_2-']
    fig, ax = plt.subplots(figsize=(8,4))
    # ax.barh(['PHQ', 'GAD', 'HDRS', 'MMSE', 'WB-'], data.loc(axis=0)[index, ['PHQ', 'GAD', 'HDRS', 'MMSE', 'WB-']], color=['#4C72B0', '#55A868', '#C44E52','#55A868','#55A868'])

    current_data = [data['PHQ_2'], data['GAD_2'], data['HDRS_2'], data['WB_2-']]
    cmap = plt.cm.get_cmap('RdYlGn_r')
    norm = plt.Normalize(vmin=0, vmax=1)
    colors = [cmap(norm(score)) for score in current_data]
    # colors = cm.RdYlGn(np.linspace(0, 1, len(labels)))

    indices = np.arange(len(labels))

    width = 0.35

    # current_data = [data['PHQ'], data['GAD'], data['HDRS'], data['MMSE'], data['WB-']]
    ax.barh(indices, current_data, height=width, color=colors)

    # Set the x-axis limits
    ax.set_xlim(0, 1)

    # Set the x-tick labels
    ax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])
    ax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])


    # Add a grid
    # ax.grid(axis='x', linestyle='--', alpha=0.9)

    # Add labels to the bars
    # for i, v in enumerate(current_data):
    #   ax.text(v + 0.01, i, str(round(v,2)), color='#333333', fontweight='bold')

    ax.set_yticks(indices + width / 2)
    ax.set_yticklabels(labels)

    # Set the title
    ax.set_title('Scores after a month')

    plt.savefig(filename, dpi=300, bbox_inches='tight', pad_inches=0)
    plt.close()
    return

de = df[['PHQ', 'GAD', 'HDRS', 'WB-', 'PHQ_2', 'GAD_2', 'HDRS_2', 'WB_2-']]

# Loop through each row of the dataframe
# =for index, row in de.iterrows():
    # Check if the sum of values in columns PHQ_2, GAD_2, and HDRS_2 is zero
    # if (row['PHQ_2'] + row['GAD_2'] + row['HDRS_2'] + row['MMSE_2']) == 0:
        # If the sum is zero, use the single bar graph function
    # else:
        # If the sum is not zero, use the single bar graph function
for index, row in de.iterrows():

  plot_single(data=row[['PHQ', 'GAD', 'HDRS', 'WB-']], filename='d1.png')
  if (row['PHQ_2'] + row['GAD_2'] + row['HDRS_2'] ) != 0:
   plot_second(data=row[['PHQ_2', 'GAD_2', 'HDRS_2', 'WB_2-']], filename='d2.png')

# from google.colab import drive
# drive.mount('/content/drive')

# class PDF(FPDF):
#     WIDTH = 210
#     def __init__(self):
#         super().__init__()
#         # Custom logo and positioning
#         # Create an `assets` folder and put any wide and short image inside
#         # Name the image `logo.png`

#         self.add_page()
#         self.image('https://github.com/dormant06/Medical-data-Analysis/raw/main/logo.png', 10, 8, 33)
#         self.image('https://github.com/dormant06/Medical-data-Analysis/raw/main/logo.png', 10, 500, 33)
#         self.set_font('Arial', 'B', 40)
#         self.cell(PDF.WIDTH - 80)
#         self.cell(60, 10, 'Patient Report', 0, 00, 'R')

#         self.ln(20)

#         self.set_font('Arial', 'B', 14)
#         self.cell(PDF.WIDTH -80)
#         self.cell(60, 1, 'TRANSLATIONAL NEUROSCIENCE AND TECHNOLOGY LAB', 0, 0, 'R')

#         self.ln(20)

#     def footer(self):
#         # Page numbers in the footer
#         self.set_y(-15)
#         self.set_font('Arial', 'I', 6)
#         self.set_text_color(128)
#         self.cell(0, 10, '"PHQ: The Patient Health Questionnaire is a diagnostic tool for mental health disorders"' + str(self.page_no()), 0, 0, 'C')

#     def footer(self):
#         # Page numbers in the footer
#         self.set_y(-15)
#         self.set_font('Arial', 'I', 6)
#         self.set_text_color(128)
#         self.cell(0, 10, '"GAD: Used as a screening tool  for generalised anxiety disorder  "' + str(self.page_no()), 0, 0, 'C')

#     def page_body(self, image, text, additional_text):
#         # Determine the position of the image and text
#         x = (PDF.WIDTH - self.get_string_width(text)) / 2 + 5
#         y = 25
#         # Add the image
#         self.image(image, 10, 50, 145, 110)
#         # Add the text
#         self.set_xy(x-130, y)
#         self.set_font('Arial', 'B', 15)
#         self.set_text_color(0, 0, 0)
#         self.multi_cell(PDF.WIDTH - 0, 140, text, 0, 'C')

#         # Add additional text
#         self.set_font('Arial', '', 12)
#         self.multi_cell(PDF.WIDTH-15, 35, additional_text, 0, 'C')

#     def print_page(self, image, text, additional_text):
#         # Generates the report
#         # self.add_page()
#         self.page_body(image, text, additional_text)


# pdf = PDF()
# pdf.print_page(' plot_second(data=row[['PHQ_2', 'GAD_2', 'HDRS_2', 'WB_2-']], filename='d2.png'),'' , 'While Red implies unhealthy, Green is the sign for good Health.\nUse the above parameters to determine if your Health has improved or deterioted over the years')
# pdf.output('report.pdf', 'F')

# def plot(data: pd.DataFrame, filename: str) -> None:
#     fig, ax = plt.subplots(figsize=(8, 4))
#     labels = ['PHQ', 'GAD', 'HDRS', 'MMSE', 'WB-']

#      # Get the minimum and maximum assessment scores
#     vmin, vmax = 0,1

#     # Create a color map from red to green based on the range of assessment scores
#     cmap = plt.cm.get_cmap('RdYlGn_r')

#     # Normalize the assessment scores to be between 0 and 1 for use with the color map
#     norm = plt.Normalize(vmin=vmin, vmax=vmax)

#     # Create a list of colors for the bars based on their assessment scores

#     indices = np.arange(len(labels))

#     width = 0.35

#     # Create a list of assessment scores for the second data set
#     new_data = [data['PHQ_2'], data['GAD_2'], data['HDRS_2'], data['MMSE_2'], data['WB_2-']]

#     colors = [cmap(norm(score)) for score in new_data]

#     # Get the minimum and maximum assessment scores for the second data set
#     vmin, vmax = 0,1

#     # Normalize the assessment scores to be between 0 and 1 for use with the color map
#     norm = plt.Normalize(vmin=vmin, vmax=vmax)

#     # Create a list of colors for the bars based on their assessment scores


#     # Create the second bar chart for the data in columns PHQ_2, GAD_2, HDRS_2
#     ax.barh(indices, new_data, height=width, color=colors, label='After 30-40 days')

#      # Create a list of assessment scores for the first data set
#     current_data = [data['PHQ'], data['GAD'], data['HDRS'], data['MMSE'], data['WB-']]

#     colors = [cmap(norm(score)) for score in current_data]

#     # Create an array of indices for the bars


#     # Set the width of each bar


#     # Create the first bar chart for the current data
#     ax.barh(indices + width, current_data, height=width, color=colors, label='At day 0')

#     # Set the x-axis limits
#     ax.set_xlim(0, 1)

#     # Set the x-tick labels
#     ax.set_xticklabels([0, 0.2, 0.4, 0.6, 0.8, 1.0])

#     ax.set_yticks(indices + width / 2)
#     ax.set_yticklabels(labels)

#     # Add labels to the bars
#     # for i, v in enumerate(current_data):
#     #     ax.text(v + 0.01, i, str(round(v, 2)), color='#333333', fontweight='bold')

#     # for i, v in enumerate(new_data):
#     #     ax.text(v + 0.01, i + width, str(round(v, 2)), color='#333333', fontweight='bold')

#     # Set the title
#     ax.set_title('Assessment Scores')

#     # ax
#     ax.legend()

#     plt.savefig(filename, dpi=300, bbox_inches='tight', pad_inches=0)
#     plt.close()
#     return

class PDF(FPDF):
    WIDTH = 210
    def __init__(self):
        super().__init__()
        # Custom logo and positioning
        # Create an `assets` folder and put any wide and short image inside
        # Name the image `logo.png`

        self.add_page()
        self.image('https://github.com/dormant06/Medical-data-Analysis/raw/main/logo.png', 10, 9, 33)
        self.set_font('Arial', 'B', 35)
        self.cell(PDF.WIDTH - 80)
        self.cell(57, 15, 'Participant Report Card', 0, 00, 'R')

        self.ln(20)

        # self.set_font('Arial', 'B', 14)
        # self.cell(PDF.WIDTH -80)
        # self.cell(60, 1, 'TRANSLATIONAL NEUROSCIENCE AND TECHNOLOGY LAB', 0, 0, 'R')

        # self.ln(20)


    def footer(self):
        # Page numbers in the footer
        self.set_y(-15)
        self.set_font('Arial', 'I', 9)
        self.set_text_color(10)
        self.cell(0, 10, 'For More information contact: TRANSLATIONAL NEUROSCIENCE AND TECHNOLOGY LAB, Department of Cognitive Sciences, IIT Kanpur', 0, 0, 'C')

        self.set_y(-25)
        self.set_font('Arial', 'I', 9)
        self.set_text_color(10)
        self.cell(0, 10, 'These scores should only be used for indicative purpose and not as any clinical result.', 0, 0, 'C')

    def page_body(self, images, text, additional_text):
        # Determine the position of the text
        x = (PDF.WIDTH - self.get_string_width(text)) / 2 + 5
        y = 25
        # Add the text
        self.set_xy(x-130, y)
        self.set_font('Arial', 'B', 15)
        self.set_text_color(0, 0, 0)
        self.multi_cell(PDF.WIDTH - 0, 140, text, 0, 'C')

        # Add the images
        for i, image in enumerate(images):
            if i == 0:
                self.image(image, 25, 50, 120, 90)
            elif i == 1:
                self.image(image, 25, 160, 140, 20)


        # Add additional text
        self.set_font('Arial', '', 12)
        self.multi_cell(PDF.WIDTH-15, 35, additional_text, 0, 'C')

    def print_page(self, images, text, additional_text):
        # Generates the report
        # self.add_page()
        self.page_body(images, text, additional_text)


pdf = PDF()
pdf.print_page(['d1.png', 'https://github.com/dormant06/Medical-data-Analysis/raw/main/d3.png'], '' , '')
pdf.output('report.pdf', 'F')

class PDF(FPDF):
    WIDTH = 210
    def __init__(self):
        super().__init__()
        # Custom logo and positioning
        # Create an `assets` folder and put any wide and short image inside
        # Name the image `logo.png`

        self.add_page()
        self.image('https://github.com/dormant06/Medical-data-Analysis/raw/main/logo.png', 10, 9, 33)
        self.set_font('Arial', 'B', 35)
        self.cell(PDF.WIDTH - 80)
        self.cell(57, 15, 'Participant Report Card', 0, 00, 'R')

        self.ln(20)

        # self.set_font('Arial', 'B', 14)
        # self.cell(PDF.WIDTH -80)
        # self.cell(60, 1, 'TRANSLATIONAL NEUROSCIENCE AND TECHNOLOGY LAB', 0, 0, 'R')

        # self.ln(20)


    def footer(self):
        #  in the footer
        self.set_y(-15)
        self.set_font('Arial', 'I', 9)
        self.set_text_color(10)
        self.cell(0, 10, 'For More information contact: TRANSLATIONAL NEUROSCIENCE AND TECHNOLOGY LAB, Department of Cognitive Sciences, IIT Kanpur', 0, 0, 'C')

        self.set_y(-25)
        self.set_font('Arial', 'I', 9)
        self.set_text_color(10)
        self.cell(0, 10, 'These scores should only be used for indicative purpose and not as any clinical result.', 0, 0, 'C')

    def page_body(self, images, text, additional_text):
        # Determine the position of the text
        x = (PDF.WIDTH - self.get_string_width(text)) / 2 + 5
        y = 25
        # Add the text
        self.set_xy(x-130, y)
        self.set_font('Arial', 'B', 15)
        self.set_text_color(0, 0, 0)
        self.multi_cell(PDF.WIDTH - 0, 140, text, 0, 'C')

        # Add the images
        for i, image in enumerate(images):
            if i == 0:
                self.image(image, 15, 50, 110, 75)
            elif i == 1:
                self.image(image, 15, 140, 110, 75)
            elif i == 2:
                self.image(image, 30, 230, 140, 20)

        # Add additional text
        self.set_font('Arial', '', 12)
        self.multi_cell(PDF.WIDTH-15, 35, additional_text, 0, 'C')

    def print_page(self, images, text, additional_text):
        # Generates the report
        # self.add_page()
        self.page_body(images, text, additional_text)


pdf = PDF()
pdf.print_page(['d1.png', 'd2.png', 'https://github.com/dormant06/Medical-data-Analysis/raw/main/d3.png'], '' , '')
pdf.output('report.pdf', 'F')

